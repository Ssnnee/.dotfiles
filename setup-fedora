#!/usr/bin/env bash
# This script sets up a brand new Fedora installation with custom configs
# It aims to help set up a new Fedora installation as quickly as possible

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'


print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}


validate_email() {
    local email="$1"
    if [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}


get_user_info() {
    print_status "Setting up Git configuration..."


    while [[ -z "$git_name" ]]; do
        read -p "Enter your full name for Git: " git_name
        if [[ -z "$git_name" ]]; then
            print_error "Name cannot be empty. Please try again."
        fi
    done

    while [[ -z "$git_email" ]]; do
        read -p "Enter your email for Git: " git_email
        if [[ -z "$git_email" ]]; then
            print_error "Email cannot be empty. Please try again."
        elif ! validate_email "$git_email"; then
            print_error "Invalid email format. Please try again."
            git_email=""
        fi
    done

    print_success "Git will be configured with:"
    echo "  Name: $git_name"
    echo "  Email: $git_email"
    echo
}

# Repository URLs
nvim="https://github.com/neovim/neovim.git"
st="https://github.com/LukeSmithxyz/st.git"

# Package arrays
dnf_packages=(
    "pass" "dunst" "pass-otp" "zbar" "ansible" "rofi" "zathura"
    "fastfetch" "pamixer" "brightnessctl" "nodejs" "libXft-devel"
    "ninja-build" "cmake" "gcc" "make" "gettext"
    "curl" "glibc-gconv-extra" "zathura-pdf-mupdf" "git" "zsh"
    "btop" "go" "rust"
)

flatpak_apps=(
    "com.brave.Browser"
    "app.zen_browser.zen"
    "org.telegram.desktop"
)

github_repos=("$nvim" "$st")

get_user_info

# Install DNF packages
print_status "Installing DNF packages..."
if sudo dnf install -y "${dnf_packages[@]}" --skip-unavailable; then
    print_success "DNF packages installed successfully"
else
    print_error "Some DNF packages failed to install"
fi

print_status "Installing Sway desktop environment..."
sudo dnf group install -y "sway-desktop-environment"

# Setup Flatpak
print_status "Setting up Flatpak..."
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

print_status "Installing Flatpak applications..."
for app in "${flatpak_apps[@]}"; do
    if flatpak install -y flathub "$app"; then
        print_success "Installed $app"
    else
        print_warning "Failed to install $app"
    fi
done

# Install from source
print_status "Installing applications from source..."
for repo in "${github_repos[@]}"; do
    repo_name=$(basename "$repo" .git)

    print_status "Cloning $repo_name..."
    if [[ -d "$repo_name" ]]; then
        print_warning "$repo_name already exists, removing old version..."
        rm -rf "$repo_name"
    fi

    git clone --depth 1 "$repo"

    (
        cd "$repo_name" || exit 1

        if [[ "$repo" == "$nvim" ]]; then
            print_status "Building Neovim..."
            make CMAKE_BUILD_TYPE=RelWithDebInfo
            sudo make install
            print_success "Neovim installed successfully"
        elif [[ "$repo" == "$st" ]]; then
            print_status "Building st (simple terminal)..."
            sudo make clean install
            print_success "st installed successfully"
        fi
    )
done

print_status "Configuring Git..."
git config --global user.name "$git_name"
git config --global user.email "$git_email"
print_success "Git configured successfully"

# Configure shell
print_status "Installing Oh My Zsh..."
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    print_success "Oh My Zsh installed"
else
    print_warning "Oh My Zsh already installed"
fi

print_status "Installing zsh-syntax-highlighting plugin..."
git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git \
    "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" 2>/dev/null || \
    print_warning "zsh-syntax-highlighting already exists"

print_status "Changing default shell to zsh..."
if [[ "$SHELL" != "$(which zsh)" ]]; then
    chsh -s "$(which zsh)"
    print_success "Default shell changed to zsh (will take effect on next login)"
else
    print_warning "Shell is already set to zsh"
fi

if [[ -f "./.zshrc" ]]; then
    print_status "Copying .zshrc configuration..."
    cp ./.zshrc ~/
    print_success ".zshrc copied"
else
    print_warning ".zshrc file not found in current directory"
fi

# Generate SSH key
print_status "Generating SSH key..."
if [[ ! -f "$HOME/.ssh/id_ed25519" ]]; then
    ssh-keygen -t ed25519 -C "$git_email" -f "$HOME/.ssh/id_ed25519" -N ""
    print_success "SSH key generated"
    print_status "Your public key:"
    cat "$HOME/.ssh/id_ed25519.pub"
else
    print_warning "SSH key already exists"
fi

# Generate GPG key
print_status "GPG key generation requires manual input..."
print_warning "Please follow the prompts to generate your GPG key"
gpg --full-gen-key

# Install fonts
if [[ -d "./fonts" ]]; then
    print_status "Installing custom fonts..."
    sudo cp -r ./fonts/ /usr/share/fonts/
    fc-cache -fv
    print_success "Fonts installed"
else
    print_warning "Fonts directory not found"
fi

print_success "Fedora setup completed!"
print_status "Summary of installed components:"
echo "  ✓ DNF packages and Sway desktop environment"
echo "  ✓ Flatpak applications"
echo "  ✓ Neovim and st from source"
echo "  ✓ Git configuration"
echo "  ✓ Oh My Zsh with syntax highlighting"
echo "  ✓ SSH key generation"
echo "  ✓ GPG key generation"
echo "  ✓ Custom fonts (if available)"
echo
print_warning "Please reboot or log out and back in for all changes to take effect."
print_status "Don't forget to add your SSH key to GitHub/GitLab if needed!"
